// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Base.Migrations
{
    [DbContext(typeof(LoggingDbContext))]
    [Migration("20210512030146_addIndex")]
    partial class addIndex
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Api.Base.Logging.ActionAudit", b =>
                {
                    b.Property<long>("ActionAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Action")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("BeginAuditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Controller")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("EndAuditTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Ip")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<string>("LogSource")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("LogType")
                        .HasColumnType("int");

                    b.Property<string>("NewObjectValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("OldObjectValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Parameter")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Referer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TargetObject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TraceId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ActionAuditId");

                    b.HasIndex("Action");

                    b.HasIndex("Controller");

                    b.ToTable("ActionAudit");
                });

            modelBuilder.Entity("Api.Base.Logging.MapLogging", b =>
                {
                    b.Property<int>("MapLoggingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MapLoggingId");

                    b.ToTable("MapLogging");
                });
#pragma warning restore 612, 618
        }
    }
}
